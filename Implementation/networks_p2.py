# -*- coding: utf-8 -*-
"""Networks_P2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18jIpOXxjnHo2ev07I8kdWkMY556byPVH
"""

# %cd ./drive/MyDrive/Mizani_Project2/Implementation/

from keras.api._v2.keras.layers import UpSampling2D
import tensorflow as tf
import numpy as np
from tensorflow.keras.layers import *
from modules_p2 import SE_Res_Block, SE_Bottleneck_Block, self_attention, SE_Block
from tensorflow.keras.regularizers import l2

def pf_init (shape,dtype):
  pf1 = np.expand_dims(np.repeat(np.expand_dims(np.array([[0, 0, 0],
                                [0, -1, 0],
                                [0, 1, 0]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  pf2 = np.expand_dims(np.repeat(np.expand_dims(np.array([[0, 0, 0],
                                [0, -1, 1],
                                [0, 0, 0]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  pf3 = np.expand_dims(np.repeat(np.expand_dims(np.array([[0, 0, 0],
                                [0, -1, 0],
                                [0, 0, 1]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  filters = np.concatenate([pf1,pf2,pf3],axis=-1)
  return filters

def SRM_init (shape,dtype):
  pf1 = np.expand_dims(np.repeat(np.expand_dims((1/4)*np.array([[0, 0, 0, 0 ,0],
                                [0, -1, 2, -1, 0],
                                [0, 2, -4, 2, 0],
                                [0, -1, 2, -1, 0],
                                [0, 0, 0, 0, 0]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  pf2 = np.expand_dims(np.repeat(np.expand_dims((1/12)*np.array([[-1, 2, -2, 2, -1],
                                [2, -6, 8, -6, 2],
                                [-2, 8, -12, 8, -2],
                                [2, -6, 8, -6, 2],
                                [-1, 2, -2, 2, -1]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  pf3 = np.expand_dims(np.repeat(np.expand_dims((1/2)*np.array([[0, 0, 0, 0 ,0],
                                [0, 0, 0, 0 ,0],
                                [0, 1, -2, 1, 0],
                                [0, 0, 0, 0 ,0],
                                [0, 0, 0, 0, 0]]).astype(float),axis=-1),repeats = 3,axis=-1),axis=-1)
  filters = np.concatenate([pf1,pf2,pf3],axis=-1)
  return filters

class bayarconstraint(tf.keras.constraints.Constraint):
  def __init__(self):
    self.one = tf.constant([[0,0,0,0,0],
                        [0,0,0,0,0],
                        [0,0,1,0,0],
                        [0,0,0,0,0],
                        [0,0,0,0,0]],dtype=tf.float32)
    self.one = tf.expand_dims(tf.expand_dims(self.one,axis=-1),axis=-1)
  def __call__(self, w):
    w = w * (1 - self.one) * 10000
    # sum = w.sum(axis=0).sum(axis=0)
    sum = tf.reduce_sum(w,axis=(0,1))
    w = w / sum
    w = w*(1 - self.one) + -1 * self.one 
    return w

def SE_Proposed_model(input_shape=(256,256,3)):
  filters_1 = 64
  filters_2 = 128
  filters_3 = 256

  
  input_ = Input(shape=input_shape)
  # input_b = Input(shape=(input_shape[0],input_shape[1],1))
  ###################### preprocessing #################################
  # pf = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same',kernel_initializer=pf_init,use_bias=False,name='pf')(input_)
  bayar  = Conv2D(filters=3,kernel_size=(5,5),strides=(1,1),padding='same',kernel_constraint=bayarconstraint(),use_bias=False,name='bayar')(input_)
  conv = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same')(input_)
  # SRM = Conv2D(filters=3,kernel_size=(5,5),strides=(1,1),padding='same',kernel_initializer=SRM_init,use_bias=False,name='SRM')(input_)
  # subtracted = Subtract()([input_,SRM])
  x = Concatenate()([bayar,conv])
  
  f1 = Conv2D(filters=32,kernel_size=(7,7),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f1 = Activation('relu')(f1)
  f2 = Conv2D(filters=32,kernel_size=(5,5),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f2 = Activation('relu')(f2)
  f3 = Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f3 = Activation('relu')(f3)

  x = Concatenate()([f1,f2,f3])
  # x = SE_Block(x)
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  x = SE_Res_Block(x,filters=32,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=32,kernel=(3,3))
  ######################## stage 1 #############################################
  x = SE_Bottleneck_Block(x,filters=filters_1,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  ######################## stage 2 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_2,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  f_1 = x

  ######################## stage 3 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_3,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))

  ######################### Upscaling Stage ####################################
  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=512,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  x = self_attention(f_1,x)
  
  x = Conv2D(filters=128,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)


  x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 


  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  x = Conv2D(filters=32,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=1,kernel_size=(7,7),padding='same')(x)
  x = Activation('sigmoid')(x)

  model = tf.keras.Model(inputs=input_,outputs=x)

  return model

def Noise_branch(input_):
  filters_1 = 64
  filters_2 = 128
  filters_3 = 256

  x  = Conv2D(filters=3,kernel_size=(5,5),strides=(1,1),padding='same',kernel_constraint=bayarconstraint(),use_bias=False,name='bayar')(input_)
  # conv = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same')(input_)
  # x = Concatenate()([bayar,conv])
  
  f1 = Conv2D(filters=32,kernel_size=(7,7),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f1 = Activation('relu')(f1)
  f2 = Conv2D(filters=32,kernel_size=(5,5),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f2 = Activation('relu')(f2)
  f3 = Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f3 = Activation('relu')(f3)

  x = Concatenate()([f1,f2,f3])
  # x = SE_Block(x)
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  x = SE_Res_Block(x,filters=32,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=32,kernel=(3,3))
  ######################## stage 1 #############################################
  x = SE_Bottleneck_Block(x,filters=filters_1,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  ######################## stage 2 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_2,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  f_1 = x

  ######################## stage 3 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_3,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))

  return x, f_1  

def RGB_branch(input_):
  filters_1 = 64
  filters_2 = 128
  filters_3 = 256
  # x  = Conv2D(filters=3,kernel_size=(5,5),strides=(1,1),padding='same',kernel_constraint=bayarconstraint(),use_bias=False,name='bayar')(input_)
  x = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same')(input_)
  # x = Concatenate()([bayar,conv])
  
  f1 = Conv2D(filters=32,kernel_size=(7,7),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f1 = Activation('relu')(f1)
  f2 = Conv2D(filters=32,kernel_size=(5,5),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f2 = Activation('relu')(f2)
  f3 = Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(x)
  f3 = Activation('relu')(f3)

  x = Concatenate()([f1,f2,f3])
  # x = SE_Block(x)
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  x = SE_Res_Block(x,filters=32,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=32,kernel=(3,3))
  ######################## stage 1 #############################################
  x = SE_Bottleneck_Block(x,filters=filters_1,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  ######################## stage 2 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_2,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  f_1 = x

  ######################## stage 3 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_3,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))

  return x, f_1  

def SE_Proposed_model_LF(input_shape=(256,256,3)):
  
  input_ = Input(shape=input_shape)

  # input_b = Input(shape=(input_shape[0],input_shape[1],1))
  ###################### preprocessing #################################
  # pf = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same',kernel_initializer=pf_init,use_bias=False,name='pf')(input_)
  x_n , f_1_n = Noise_branch(input_)
  x_r , f_1_r = RGB_branch(input_)

  x = Concatenate()([x_n,x_r])

  f_1 = Concatenate()([f_1_n,f_1_r])
  f_1 = Conv2D(filters=128,kernel_size=(3,3),padding='same')(f_1) 

  ######################### Upscaling Stage ####################################
  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=512,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  x = self_attention(f_1,x)
  
  x = Conv2D(filters=128,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)


  x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 


  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  x = Conv2D(filters=32,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=1,kernel_size=(7,7),padding='same')(x)
  x = Activation('sigmoid')(x)

  model = tf.keras.Model(inputs=input_,outputs=x)

  return model  

def SE_Proposed_model_EF(input_shape=(256,256,3)):
  filters_1 = 64
  filters_2 = 128
  filters_3 = 256

  
  input_ = Input(shape=input_shape)
  # input_b = Input(shape=(input_shape[0],input_shape[1],1))
  ###################### preprocessing #################################
  bayar  = Conv2D(filters=3,kernel_size=(5,5),strides=(1,1),padding='same',kernel_constraint=bayarconstraint(),use_bias=False,name='bayar')(input_)
  conv = Conv2D(filters=3,kernel_size=(3,3),strides=(1,1),padding='same')(input_)
  
  f1_c = Conv2D(filters=32,kernel_size=(7,7),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(conv)
  f1_c = Activation('relu')(f1_c)
  f2_c = Conv2D(filters=32,kernel_size=(5,5),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(conv)
  f2_c = Activation('relu')(f2_c)
  f3_c = Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(conv)
  f3_c = Activation('relu')(f3_c)

  f1_b = Conv2D(filters=32,kernel_size=(7,7),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(bayar)
  f1_b = Activation('relu')(f1_b)
  f2_b = Conv2D(filters=32,kernel_size=(5,5),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(bayar)
  f2_b = Activation('relu')(f2_b)
  f3_b = Conv2D(filters=32,kernel_size=(3,3),strides=(1,1),padding='same',kernel_regularizer=l2(1e-3))(bayar)
  f3_b = Activation('relu')(f3_b)

  x_c = Concatenate()([f1_c,f2_c,f3_c])
  x_b = Concatenate()([f1_b,f2_b,f3_b])

  x = Concatenate()([x_c,x_b])

  # x = SE_Block(x)
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  # x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  # x = Activation('relu') (x) 
  x = SE_Res_Block(x,filters=32,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=32,kernel=(3,3))
  ######################## stage 1 #############################################
  x = SE_Bottleneck_Block(x,filters=filters_1,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_1,kernel=(3,3))
  ######################## stage 2 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_2,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_2,kernel=(3,3))
  f_1 = x

  ######################## stage 3 #############################################

  x = SE_Bottleneck_Block(x,filters=filters_3,kernel=(3,3),first=True)
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))
  x = SE_Res_Block(x,filters=filters_3,kernel=(3,3))

  ######################### Upscaling Stage ####################################
  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=512,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  # x = self_attention(f_1,x)
  
  x = Conv2D(filters=128,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)


  x = Conv2D(filters=64,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 


  x = Conv2D(filters=256,kernel_size=(3,3),padding='same')(x)
  x = tf.nn.depth_to_space(x,2)

  x = Conv2D(filters=32,kernel_size=(3,3),padding='same')(x) 
  x = Activation('relu') (x) 

  x = Conv2D(filters=1,kernel_size=(7,7),padding='same')(x)
  x = Activation('sigmoid')(x)

  model = tf.keras.Model(inputs=input_,outputs=x)

  return model
